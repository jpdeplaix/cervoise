import Nat

open Nat

let rec plus (n : Nat.T) (m : Nat.T) : Nat.T =
  match n with
  | O -> m
  | S p -> S (plus p m)
  end

let rec mult (n : Nat.T) (m : Nat.T) : Nat.T =
  match n with
  | O -> O
  | S p -> plus m (mult p m)
  end

let rec fact (n : Nat.T) : Nat.T =
  match n with
  | O -> S O
  | S x -> mult (S x) (fact x)
  end

let main =
  Nat.print (fact O); -- 1
  Nat.print (fact (S O)); -- 1
  Nat.print (fact (S (S O))); -- 2
  Nat.print (fact (S (S (S O)))); -- 6
  Nat.print (fact (S (S (S (S O))))); -- 24
  Nat.print (fact (S (S (S (S (S O)))))); -- 120
  Nat.print (fact (S (S (S (S (S (S (S (S O))))))))); -- 362880
  Unit
