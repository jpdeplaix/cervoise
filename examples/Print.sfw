type Nat =
  | O
  | S Nat

let printNat : forall X, X -[IO]-> Nat = begin
  @msg = constant [4 x i8] c"%d\0a\00"
  declare i32 @printf(i8*, ...)
  define i8* @Print..printNat(i8* %i) {
    %access_prim = load i8* %i
    %access = zext i8 %access_prim to i32
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %access)
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

let zero : Nat = begin
  @Print..zero = constant i8 0
end

let main =
  let unit = printNat [Nat] zero in
  Unit

type Nat' =
  | O
  | S Nat'
  | D Nat' Nat'
