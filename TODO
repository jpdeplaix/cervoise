=== TODO ===

== Short term ==

* Define a proper operational semantics
* Typeclasses


== Medium term ==

* Records
* Extensible records & extensible variants
* Clean:
  * Fix TODO
  * Remove names in backend (« %comment = call donothing » or metadata instead) ?
  * Add functions in backend (like access_env …)
  * Add more explicit type names (like « type name = string » instead of just use a string)
* Clean error the handling system: extend an error type (+= ..) for each module that can raise errors and print them in ErrorPrinter
* Cleaning (parser, typechecker, backend, printer, …)
* Unit-tests
* Handle dynamic exceptions (allocation failures, …)
    let main try with
      | CannotAllocate -> ()
    end =
      dosomething ()
* Exceptions
  * Check if the exception is actually raised
* Dynamically create a wrapper when partially apply a function instead of creating a lambda for each arguments (needs an analysis)
* Add « type private T = … » to not have the getters (records) or the constructors (variants) into the environment


== Long term ==

* Do we change for System Fc ? (Recursive type aliases, GADTs, …)
* Have a real custom GC
* Type inference
* Have a real FFI
