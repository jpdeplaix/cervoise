type T =
  | O : T
  | S : T -> T

let print : T -[IO]-> Unit = begin
  @msg = constant [4 x i8] c"%d\0a\00"

  declare i32 @printf(i8*, ...)
  
  define i32 @__int_of_nat(i8*) {
    %value = bitcast i8* %0 to { i1, i32, i8*, [2 x i8*] }*
    %value_prim = load { i1, i32, i8*, [2 x i8*] }* %value
    %variant = extractvalue { i1, i32, i8*, [2 x i8*] } %value_prim, 3
    %keyp = extractvalue [2 x i8*] %variant, 0
    %key = ptrtoint i8* %keyp to i32
    %cond = icmp eq i32 %key, 0
    br i1 %cond, label %end, label %loop
  loop:
    %next = extractvalue [2 x i8*] %variant, 1
    %val = call i32 @__int_of_nat(i8* %next)
    %res = add i32 1, %val
    ret i32 %res
  end:
    ret i32 0
  }

  define i8* @.print(i8*) {
    %i = call i32 @__int_of_nat(i8* %0)
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %i)
    ret i8* null
  }
end

let main = Unit
