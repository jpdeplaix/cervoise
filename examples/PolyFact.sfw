import Nat

type List a =
  | Nil
  | Cons a (List a)

type alias Nat = List Unit

let rec natToNat (acc : Nat.T) (n : Nat) : Nat.T =
  match n with
  | Nil -> acc
  | Cons Unit n -> natToNat (Nat.S acc) n
  end

let print (n : Nat) = Nat.print (natToNat Nat.O n)

let rec plus (n : Nat) (m : Nat) : Nat =
  match n with
  | Nil -> m
  | Cons Unit p -> Cons [Unit] Unit (plus p m)
  end

let rec mult (n : Nat) (m : Nat) : Nat =
  match n with
  | Nil -> Nil [Unit]
  | Cons Unit p -> plus m (mult p m)
  end

let rec fact (n : Nat) : Nat =
  match n with
  | Nil -> Cons [Unit] Unit (Nil [Unit])
  | Cons Unit x -> mult (Cons [Unit] Unit x) (fact x)
  end

let main =
  print (fact (Nil [Unit])); -- 1
  print (fact (Cons [Unit] Unit (Nil [Unit]))); -- 1
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit])))); -- 2
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit]))))); -- 6
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit])))))); -- 24
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit])))))))); -- 720
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit]))))))))); -- 5040
  print (fact (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Cons [Unit] Unit (Nil [Unit])))))))))); -- 40320
  Unit
