% System F

metavar x ::=                           {{ com term variable }}
metavar a {{ tex \alpha }} ::=          {{ com type variable }}

grammar
  t :: t_ ::=                                                            {{ com term }}
    | x                                          ::   :: Var               {{ com variable }}
    | \ ( x : T ) => t                           ::   :: Abs               {{ com abstraction }}
    | \ { a : * } => t                           ::   :: TAbs              {{ com type abstraction }}
    | t1 t2                                      ::   :: App               {{ com application }}
    | t @[ T ]                                   ::   :: TApp              {{ com type application }}
    | ( t )                                      :: M :: Paren             {{ com parenthesis }}

  T {{ tex \tau }} :: T_ ::=                                             {{ com type }}
    | a                                          ::   :: var               {{ com type variable }}
    | T1 -> T2                                   ::   :: arrow             {{ com arrow }}
    | forall ( a : * ) , T                       ::   :: forall            {{ com universal quantification }}
    | ( T )                                      :: M :: paren             {{ com parenthesis }}

  G {{ tex \Gamma }} :: G_ ::=                                           {{ com typing environment }}
    | empty                                      ::   :: empty             {{ com empty }}
    | G , x : T                                  ::   :: var               {{ com variable }}
    | G , a : *                                  ::   :: tyvar             {{ com type variable }}

  v :: v_ ::=                                                            {{ com value }}
    | \ ( x : T ) => t                           ::   :: Abs               {{ com abstraction }}
    | ( v )                                      :: M :: Paren             {{ com parenthesis }}

% Ott meta rules

  terminals :: terminals_ ::=
    | .                   ::   :: comp       {{ tex \circ }}
    | ~                   ::   :: tilde      {{ tex \sim }}
    | U                   ::   :: union      {{ tex \cup }}
    | \                   ::   :: lambda     {{ tex \lambda }}
    | &                   ::   :: jspace     {{ tex \qquad\quad }}
    | @                   ::   :: at         {{ tex ~@~ }}
    | >>                  ::   :: fillspace  {{ tex \quad }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    | =>                  ::   :: earrow     {{ tex \Rightarrow }}
    | ]->                 ::   :: rarrow     {{ tex ]\!\!\!\rightarrow }}
    | -[                  ::   :: larrow     {{ tex -\!\!\mkern-2mu[ }}
    | ->                  ::   :: arrow      {{ tex \rightarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | |->                 ::   :: mapsto     {{ tex \mapsto }}
    | |>                  ::   :: rhd        {{ tex \rhd }}
    | /=                  ::   :: neq        {{ tex \neq }}
    | :>                  ::   :: coerce     {{ tex \blacktriangleright }}
    | ==                  ::   :: equiv      {{ tex \equiv }}
    | @[                  ::   :: lbracket   {{ tex ~[ }}
    | ]]@                 ::   :: rdbracket  {{ tex ] ]~ }}
    | ~[                  ::   :: tildeL     {{ tex ~{\sim}[ }}
    | C=                  ::   :: subseteq   {{ tex \subseteq }}
    | <:                  ::   :: subtype    {{ tex \prec }}
    | @!                  ::   :: spaceeff   {{ tex \:! }}
    | @..@                ::   :: spaceJ     {{ tex \quad..\quad }}
    | elim                ::   :: elim       {{ tex \bold{elim}_{\mathrm{i} } }}
    | isin                ::   :: isin       {{ tex \in }}
    | notin               ::   :: notin      {{ tex \notin }}
    | forall              ::   :: forall     {{ tex \forall }}
    | exists              ::   :: exists     {{ tex \exists }}
    | empty               ::   :: empty      {{ tex \emptyset }}

  formula :: formula_ ::=
    | judgement                         ::   :: judgement
    | judgement1 @..@ judgementn        ::   :: judgements
    | formula1 & formula2               ::   :: inlineJudgements
    | >> formula                        ::   :: fillSpace
    | x : T isin G                      ::   :: xIsInG
    | a : * isin G                      ::   :: aIsInG
    | a notin G                         ::   :: aNotInG
    | a1 /= a2                          ::   :: aNEq
    | x1 /= x2                          ::   :: xNEq
    | exists ( T isin E ) , formula     ::   :: existsTE

subrules
  v <:: t

% Semantics

embed
  {{ tex \begin{tabular}{lcl} }}
  {{ tex \hline\hline }}
  {{ tex & & \\ }}
  {{ tex Initial environment: & $\Gamma$ = & $\emptyset$\\ }}
  {{ tex & & \\ }}
  {{ tex \hline\hline }}
  {{ tex \end{tabular} }}
  {{ tex \\\\\\ }}

defns
  Jtype :: '' ::=

  defn
    G |- t : T :: :: GtT :: T_ {{ com Typing rules }} by

    x : T isin G
    ------------ :: Var
    G |- x : T

    G, x : T1 |- t : T2    &    G |- T1 : *
    --------------------------------------- :: Abs
    G |- (\(x : T1) => t) : T1 -> T2

    a notin G    &    G, a : * |- t : T
    ---------------------------------------- :: TyAbs
    G |- (\{a : *} => t) : forall (a : *), T

    G |- t1 : T2 -> T1    &    G |- t2 : T2
    --------------------------------------- :: App
    G |- t1 t2 : T1

    G |- t : forall (a : *), T2    &    G |- T1 : *    &    [a |-> T1] T2 |> T2'
    ---------------------------------------------------------------------------- :: TyApp
    G |- t @[T1] : T2'

defns
  Jkind :: '' ::=

  defn
    G |- T : * :: :: GT :: K_ {{ com Type [[T]] is well formed }} by

    a : * isin G
    ------------ :: Var
    G |- a : *

    G |- T1 : *    &    G |- T2 : *
    ------------------------------- :: Arrow
    G |- (T1 -> T2) : *

    a notin G    &    G, a : * |- T : *
    ----------------------------------- :: Forall
    G |- (forall (a : *), T) : *

defns
  Jop :: '' ::=

  defn
    t --> t' ::  :: reduce :: E_ {{ com Operational semantics }} by

    t2 --> t2'
    ---------------- :: App1
    t1 t2 --> t1 t2'

    t --> t'
    ------------ :: App2
    t v --> t' v

    [x |-> v] t |> t'
    ------------------------ :: AppAbs
    (\(x : T) => t) v --> t'

    t --> t'
    ------------------------------------ :: TAbs
    (\{a : *} => t) --> (\{a : *} => t')

    t --> t'
    ------------------ :: TApp
    t @[T] --> t' @[T]

    [a |-> T] v |> v'
    --------------------------- :: TAppAbs
    (\{a : *} => v) @[T] --> v'

defns
  JSubstT :: '' ::=

  defn
    [ a |-> T1 ] T2 |> T3 :: :: SubstT :: SubstT_ {{ com Type substitution }} by


    ---------------- :: Var1
    [a |-> T] a |> T

    a1 /= a2
    ------------------- :: Var2
    [a1 |-> T] a2 |> a2

    [a |-> T1] T2 |> T2'    &    [a |-> T1] T3 |> T3'
    ------------------------------------------------- :: Arrow
    [a |-> T1] (T2 -> T3) |> T2' -> T3'

    a1 /= a2    &    [a1 |-> T1] T2 |> T2'
    ----------------------------------------------------------- :: Forall
    [a1 |-> T1] (forall (a2 : *), T2) |> (forall (a2 : *), T2')

defns
  JSubst :: '' ::=

  defn
    [ x |-> v ] t1 |> t2 :: :: Subst :: Subst_ {{ com substitution }} by


    ---------------- :: Var1
    [x |-> v] x |> v

    x1 /= x2
    ------------------- :: Var2
    [x1 |-> v] x2 |> x2


    -------------------------------------------- :: Abs1
    [x |-> v] (\(x : T) => t) |> (\(x : T) => t)

    x1 /= x2    &    [x1 |-> v] t1 |> t2
    ------------------------------------------------- :: Abs2
    [x1 |-> v] (\(x2 : T) => t1) |> (\(x2 : T) => t2)

    [x |-> v] t1 |> t2
    ---------------------------------------------- :: TAbs
    [x |-> v] (\{a : *} => t1) |> (\{a : *} => t2)

    [x |-> v] t1 |> t1'    &    [x |-> v] t2 |> t2'
    ----------------------------------------------- :: App
    [x |-> v] (t1 t2) |> t1' t2'

    [x |-> v] t1 |> t2
    -------------------------------- :: TApp
    [x |-> v] (t1 @[T]) |> (t2 @[T])

defns
  JTtSubst :: '' ::=

  defn
    [ a |-> T ] t1 |> t2 :: :: TtSubst :: TtSubst_ {{ com substitution of type variable in term }} by


    ---------------- :: Var
    [a |-> T] x |> x

    [a |-> T1] T2 |> T2'    &    [a |-> T1] t1 |> t2
    -------------------------------------------------- :: Abs
    [a |-> T1] (\(x : T2) => t1) |> (\(x : T2') => t2)

    a1 /= a2    &    [a1 |-> T] t1 |> t2
    ------------------------------------------------- :: TAbs
    [a1 |-> T] (\{a2 : *} => t1) |> (\{a2 : *} => t2)

    [a |-> T] t1 |> t1'    &    [a |-> T] t2 |> t2'
    ----------------------------------------------- :: App
    [a |-> T] (t1 t2) |> t1' t2'

    [a |-> T1] t1 |> t2    &    [a |-> T1] T2 |> T2'
    ------------------------------------------------ :: TApp
    [a |-> T1] (t1 @[T2]) |> (t2 @[T2'])
