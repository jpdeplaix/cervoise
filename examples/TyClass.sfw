import library Nat
import Multi

open Nat

let printInt : Nat -[IO]-> Unit = begin
  @msg = constant [4 x i8] c"%d\0a\00"

  declare i32 @printf(i8*, ...)
  
  define i32 @__int_of_nat(i8*) {
    %var = bitcast i8* %0 to [2 x i8*]*
    %variant = load [2 x i8*]* %var
    %keyp = extractvalue [2 x i8*] %variant, 0
    %key = ptrtoint i8* %keyp to i32
    %cond = icmp eq i32 %key, 0
    br i1 %cond, label %end, label %loop
  loop:
    %next = extractvalue [2 x i8*] %variant, 1
    %val = call i32 @__int_of_nat(i8* %next)
    %res = add i32 1, %val
    ret i32 %res
  end:
    ret i32 0
  }

  define i8* @TyClass..printInt(i8*) {
    %i = call i32 @__int_of_nat(i8* %0)
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %i)
    ret i8* null
  }
end

class Print A =
  let print1 : A -[IO]-> Unit
end

let printInt2' (n : Nat) = printInt n; Unit

let test ?(z : Print A) (x : A) = print1 ?[z] x

instance [x] Print Unit =
  let print1 (_ : Unit) = printInt O
end

instance Print Unit =
  let print1 (_ : Unit) = printInt (S O)
end

let test () = print1 ?[x] Unit

let lol (f : Unit -[IO]-> Unit) = f

let lol = lol (\(_ : Unit) -> Unit)

class PrintLol (A : !) =
  let print : (Unit -[A]-> Unit) -[IO]-> Unit
end

instance PrintLol [] =
  let print (_ : Unit -> Unit) = printInt (S (S O))
end

let lol () = print (\(_ : Unit) -> Unit)

let test1 = Multi.show

class ReadLike A =
  let read : Unit -[]-> A
end

instance ReadLike Nat =
  let rec read () : Nat = read Unit
end

let main =
  printInt (read Unit)
