metavar termvar, x ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

metavar typvar, X ::=
  {{ tex \mathit{[[typvar]]} }} {{ com  type variable  }}

grammar
  t :: 't_' ::=                                         {{ com term }}
    | x                   ::   :: Var                     {{ com variable }}
    | \ ( x : T ) -> t    ::   :: Lam                     {{ com abstraction }}
    | \ ( X : K ) -> t    ::   :: TLam                    {{ com type abstraction }}
    | t t'                ::   :: App                     {{ com application }}
    | t [ T ]             ::   :: TApp                    {{ com type application }}
    | ( t )               :: S :: paren
    | [ x |-> t ] t'      :: M :: tsub
    | [ X |-> T ] t       :: M :: Tsub

  v :: 'v_' ::=                                         {{ com  value }}
    | \ ( x : T ) -> t    ::   :: Lam                 {{ com abstraction }}
    | \ ( X : K ) -> t    ::   :: TLam                {{ com type abstraction }}

  K :: 'K_' ::=                                    {{ com kinds }}
    | *                   ::   :: Star               {{ com star }}
    | K -> K'             ::   :: KArrow             {{ com kind arrow }}

  T :: T_ ::=                                           {{ com type }}
    | X                       ::   :: var                     {{ com variable }}
    | T -> T'                 ::   :: arrow                   {{ com function }}
    | \ ( X : K ) -> T        ::   :: abs                     {{ com operator abstraction }}
    | forall ( X : K ) , T    ::   :: forall                  {{ com forall }}
    | T T'                    ::   :: app                     {{ com operator application }}
    | ( T )                   :: S :: paren
    | [ X |-> T ] T'          :: M :: sub

  G {{ tex \Gamma }} :: G_ ::= {{ com type environment }}
    | empty               ::   :: em {{ com empty }}
    | G , x : T           ::   :: vn {{ com vars }}
    | G , X : K           ::   :: tn {{ com tvars }}

  terminals :: 'terminals_' ::=
    | \                   ::   :: lambda     {{ tex \lambda }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    |  ->                 ::   :: arrow      {{ tex \rightarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | |->                 ::   :: mapsto     {{ tex \mapsto }}
    | in                  ::   :: in         {{ tex \in }}
    | ==                  ::   :: equiv      {{ tex \equiv }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | not ( formula )     ::   :: not
    | x = x'              ::   :: eqv
    | X == X'             ::   :: Teqv
    | x : T in G          ::   :: xTG
    | X : K in G          ::   :: XG

subrules
  v <:: t

freevars
  T X :: ftv
  t x :: fv

substitutions
  single t x :: tsubst
  single T X :: Tsubst

defns
  Jtype :: '' ::=

  defn
    G |- t : T :: :: GtT :: T_ {{ com Typing }} by

    x:T in G
    -------- :: Var
    G |- x:T

    G, x1 : T1 |- t : T
    G |- T1 : *
    ------------------------------ :: Abs
    G |- \(x1 : T1) -> t : T1 -> T

    G |- t : T1 -> T2
    G |- t' : T1
    ----------------- :: App
    G |- t t' : T2

    G, X : K |- t : T
    -------------------------------------- :: TAbs
    G |- \(X : K) -> t : forall (X : K), T

    G |- t : forall (X : K), T2
    G |- T1 : K
    --------------------------- :: TApp
    G |- t [T1] : [X |-> T1]T2

    G |- t : X
    X == X'
    G |- X' : *
    ------------ :: Eq
    G |- t : X'

  defn
    G |- T : K :: :: GT :: K_ {{ com Kinding }} by

    X : K in G
    ---------- :: TVar
    G |- X : K

    G, X : K1 |- T : K2
    ------------------------------ :: Abs
    G |- \(X : K1) -> T : K1 -> K2

    G |- T1 : K11 -> K12
    G |- T2 : K11
    -------------------- :: App
    G |- T1 T2 : K12

defns
  Jop :: '' ::=

  defn
    t --> t' ::  :: reduce :: E_ {{ com Evaluation }} by

    t1 --> t1'
    -------------- :: App1
    t1 t --> t1' t

    t1 --> t1'
    -------------- :: App2
    v t1 --> v t1'


    --------------------------------------- :: AppAbs
    (\(x : T) -> t12) v2 -->  [x |-> v2]t12

    t --> t'
    ---------------- :: TApp
    t [T] --> t' [T]


    ---------------------------------- :: TAppTAbs
    (\(X : K) -> t) [T] --> [X |-> T]t
