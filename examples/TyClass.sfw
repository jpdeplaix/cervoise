import library Nat
import Multi

open Nat

foreign "GC_malloc" alloc : Int -[IO]-> String

foreign "sprintf" fmt : String -> String -> Int -[IO]-> Unit

foreign "puts" println : String -[IO]-> Unit

foreign ".cervoise.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : [[IO]] Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

class Print A =
  let print1 : A -[IO]-> Unit
end

let printInt2' (n : Nat) = printNat n; Unit

let test ?(z : Print A) (x : A) = print1 ?[z] x

instance [x] Print Unit =
  let print1 (_ : Unit) = printNat O
end

instance Print Unit =
  let print1 (_ : Unit) = printNat (S O)
end

let test () = print1 ?[x] Unit

let lol (f : Unit -[IO]-> Unit) = f

let lol = lol (\(_ : Unit) -> Unit)

class PrintLol (A : !) =
  let print : (Unit -[A]-> Unit) -[IO]-> Unit
end

instance PrintLol [] =
  let print (_ : Unit -> Unit) = printNat (S (S O))
end

let lol () = print (\(_ : Unit) -> Unit)

let test1 = Multi.show

class ReadLike A =
  let read : Unit -[]-> A
end

instance ReadLike Nat =
  let rec read () : Nat = read Unit
end

let main =
  printNat (read Unit)
