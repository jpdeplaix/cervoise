import library Nat

open Nat

let printInt : Nat -[IO]-> Unit = begin
  @msg = constant [4 x i8] c"%d\0a\00"

  declare i32 @printf(i8*, ...)

  define i32 @__int_of_nat(i8*) {
    %var = bitcast i8* %0 to [2 x i8*]*
    %variant = load [2 x i8*]* %var
    %keyp = extractvalue [2 x i8*] %variant, 0
    %key = ptrtoint i8* %keyp to i32
    %cond = icmp eq i32 %key, 0
    br i1 %cond, label %end, label %loop
  loop:
    %next = extractvalue [2 x i8*] %variant, 1
    %val = call i32 @__int_of_nat(i8* %next)
    %res = add i32 1, %val
    ret i32 %res
  end:
    ret i32 0
  }

  define i8* @TailFact..printInt(i8*) {
    %i = call i32 @__int_of_nat(i8* %0)
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %i)
    ret i8* null
  }
end

exception Lol

let rec plus (n : Nat) (m : Nat) : [Exn [Lol]] Nat =
  match n with
  | O -> m
  | S p -> match S O with O -> fail [Nat] Lol | S _ -> plus p (S m) end
  end

let rec mult (s : Nat) (m : Nat) (n : Nat) : [Exn [Lol]] Nat =
  match n with
  | O -> s
  | S p -> match S O with O -> fail [Nat] Lol | S _ -> mult (plus m s) m p end
  end

let mult (a : Nat) (b : Nat) = mult O a b

let rec fact (acc : Nat) (n : Nat) : [Exn [Lol]] Nat =
  match n with
  | O -> acc
  | S x -> match S O with O -> fail [Nat] Lol | S _ -> fact (mult n acc) x end
  end

let fact = fact (S O)

let main =
  try
    printInt (fact O); -- 1
    printInt (fact (S O)); -- 1
    printInt (fact (S (S O))); -- 2
    printInt (fact (S (S (S O)))); -- 6
    printInt (fact (S (S (S (S O))))); -- 24
    printInt (fact (S (S (S (S (S O)))))); -- 120
    printInt (fact (S (S (S (S (S (S O))))))); -- 720
    printInt (fact (S (S (S (S (S (S (S O)))))))); -- 5040
    printInt (fact (S (S (S (S (S (S (S (S O))))))))); -- 40320
    printInt (fact (S (S (S (S (S (S (S (S (S O)))))))))); -- 362880
    printInt (fact (S (S (S (S (S (S (S (S (S (S O))))))))))) -- 3628800
--    printInt (fact (S (S (S (S (S (S (S (S (S (S (S O)))))))))))) -- 29916800 (Too much RAM but works)
  with
  | Lol -> Unit
  end
