type Int =
  | O : Int
  | S : Int -> Int

let printInt : Int -[IO]-> Int = begin
  @msg = constant [4 x i8] c"%d\0a\00"
  declare i32 @printf(i8*, ...)
  define i8* @.printInt(i8* %i) {
    %access_prim = load i8* %i
    %access = zext i8 %access_prim to i32
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %access)
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

type Unit = Unit : Unit

let id (f:Unit -> Unit) = f Unit

let f =
  let rec g (x : Int) (y : Int) (k : Unit -[IO]-> Unit) : Unit =
    g y x (λ(u : Unit) -> let unused = printInt x in k Unit)
  in
  g

let main =
  let test = f O (S O) (λ(x:Unit) -> Unit) in
  O
