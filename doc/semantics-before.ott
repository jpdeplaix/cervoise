metavar termvar, x ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

metavar typvar, X ::=
  {{ tex \mathit{[[typvar]]} }} {{ com  type variable  }}

grammar
  t :: 't_' ::=                                         {{ com term }}
    | x                   ::   :: Var                     {{ com variable }}
    | \ ( x : T ) -> t    ::   :: Lam                     {{ com abstraction }}
    | \ ( X : K ) -> t    ::   :: TLam                    {{ com type abstraction }}
    | t t'                ::   :: App                     {{ com application }}
    | ( t )               :: S :: paren
    | { t / x } t'        :: M :: tsub

  v :: 'v_' ::=                                         {{ com  value }}
    | \ ( x : T ) -> t        ::   :: Lam                     {{ com abstraction }}
    | \ ( X : K ) -> t        ::   :: TLam                     {{ com type abstraction }}

  T :: T_ ::=                                           {{ com type }}
    | X                   ::   :: var                     {{ com variable }}
    | T -> T'             ::   :: arrow                   {{ com function }}
    | forall X , T        ::   :: forall                  {{ com forall }} 
    | ( T )               :: S :: paren
    | { t / x } t'        :: M :: tsub

  K :: K_ ::=
    | *                   ::   :: star                 {{ com kind star }}
    | K -> K'             ::   :: kindArrow            {{ com kind arrow }}

  G {{ tex \Gamma }} :: G_ ::= {{ com type environment }}
    | empty               ::   :: em {{ com empty }}
    | G , x : T           ::   :: vn {{ com vars }}
    | G , X : K           ::   :: tn {{ com tvars }}

  terminals :: 'terminals_' ::=
    | \                   ::   :: lambda     {{ tex \lambda }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    |  ->                 ::   :: arrow      {{ tex \rightarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | in                  ::   :: in         {{ tex \in }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | not ( formula )     ::   :: not
    | x = x'              ::   :: eqv
    | x : T in G          ::   :: xTG
    | T : K in G          ::   :: TKG

subrules
  v <:: t

freevars
  T X :: ftv
  t x :: fv

substitutions
  single t x :: tsubst
  single T X :: Tsubst

defns
  Jtype :: '' ::=

defn
    G |- t : T :: :: GtT :: GtT_ by
    G |- T : K :: :: GTK :: GTK_ by

    x:T in G
    -------- :: value_name
    G |- x:T

    X:K in G
    -------- :: type_kind
    G |- X:K

    G |- t : T1->T2
    G |- t' : T1
    ---------------- :: apply
    G |- t t' : T2

    G |- t : T
    ------------------ :: lambda
    G |- \(x1 : T1) -> t : T1->T


defns
  Jop :: '' ::=

    defn
    t1 --> t2 ::  :: reduce :: ''       {{ com [[t1]] reduces to [[t2]] }} by


    --------------------------  :: ax_app
    (\(x : T) -> t12) v2 -->  {v2/x}t12

    t1 --> t1'
    -------------- :: ctx_app_fun
    t1 t --> t1' t

    t1 --> t1'
    -------------- :: ctx_app_arg
    v t1 --> v t1'
