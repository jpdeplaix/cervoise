type Nat =
  | O : Nat
  | S : Nat -> Nat

type Unit = Unit : Unit

let printInt : Nat -> Unit = begin
  @msg = internal constant [4 x i8] c"%d\0a\00"

  declare i32 @printf(i8*, ...)
  
  define internal i32 @__int_of_nat(i8*) {
    %var = bitcast i8* %0 to { i32, i8* }*
    %variant = load { i32, i8* }* %var
    %key = extractvalue { i32, i8* } %variant, 0
    %cond = icmp eq i32 %key, 0
    br i1 %cond, label %e, label %loop
  loop:
    %next = extractvalue { i32, i8* } %variant, 1
    %lol = bitcast i8* %next to [1 x i8*]*
    %lolol = load [1 x i8*]* %lol
    %lololol = extractvalue [1 x i8*] %lolol, 0
    %val = call i32 @__int_of_nat(i8* %lololol)
    %res = add i32 1, %val
    ret i32 %res
  e:
    ret i32 0
  }

  define internal i8* @__printInt(i8*, i8**) {
    %i = call i32 @__int_of_nat(i8* %0)
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @msg, i32 0, i32 0), i32 %i)
    ret i8* null
  }
  @_printInt = internal global {i8* (i8*, i8**)*, i8**} {i8* (i8*, i8**)* @__printInt, i8** null}
  @printInt = global {i8* (i8*, i8**)*, i8**}* getelementptr({i8* (i8*, i8**)*, i8**}* @_printInt)
end

let rec plus (n : Nat) (m : Nat) : Nat =
  match n with
  | O -> m
  | S p -> S (plus p m)
  end

let rec mult (n : Nat) (m : Nat) : Nat =
  match n with
  | O -> O
  | S p -> plus m (mult p m)
  end

let rec fact (n : Nat) : Nat =
  match n with
  | O -> S O
  | S x -> mult (S x) (fact x)
  end

let test = printInt (fact O) -- 1
let test = printInt (fact (S O)) -- 1
let test = printInt (fact (S (S O))) -- 2
let test = printInt (fact (S (S (S O)))) -- 6
let test = printInt (fact (S (S (S (S O))))) -- 24
let test = printInt (fact (S (S (S (S (S O)))))) -- 120
let test = printInt (fact (S (S (S (S (S (S (S (S (S O)))))))))) -- 362880
