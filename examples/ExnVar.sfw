import library Nat

open Nat

exception EndOfFile

foreign "GC_malloc" alloc : Int -[IO]-> String

foreign "sprintf" fmt : String -> String -> Int -[IO]-> Unit

foreign "puts" println : String -[IO]-> Unit

foreign ".cervoise.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : [[IO]] Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

type List x =
  | Nil
  | Cons x (List x)

let inputLine () =
  match Cons [Unit] Unit (Nil [Unit]) with
  | Nil -> fail [Unit] EndOfFile
  | Cons _ _ -> Unit
  end

let readLines () =
  let rec loop (acc : List Unit) : List Unit =
    try
      let l = inputLine Unit in
      loop (Cons [Unit] l acc)
    with
    | EndOfFile -> acc
    end
  in
  loop (Nil [Unit])

let rec plus (n : Nat.Nat) (m : Nat.Nat) : Nat.Nat =
  match n with
  | Nat.O -> m
  | Nat.S p -> Nat.S (plus p m)
  end

let rec mult (n : Nat.Nat) (m : Nat.Nat) : Nat.Nat =
  match n with
  | Nat.O -> Nat.O
  | Nat.S p -> plus m (mult p m)
  end

let fact =
  let rec aux (acc : Nat) (n : Nat) : Nat =
    match n with
    | O -> acc
    | S x -> aux (mult n acc) x
    end
  in
  aux (S O)

let main =
  printNat (fact (S (S (S (S (S (S (S (S O))))))))) -- 40320
