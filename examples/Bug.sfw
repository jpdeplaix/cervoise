type Nat =
  | O
  | S Nat

foreign "GC_malloc" alloc : Int -[IO]-> String

foreign "sprintf" fmt : String -> String -> Int -[IO]-> Unit

foreign "puts" println : String -[IO]-> Unit

foreign ".cervoise.add" add : Int -> Int -[IO]-> Int

let natToInt =
  let rec aux (acc : Int) (n : Nat) : [[IO]] Int =
    match n with
    | O -> acc
    | S n -> aux (add 1 acc) n
    end
  in
  aux 0

let printNat (n : Nat) =
  let n = natToInt n in
  let buf = alloc 512 in
  fmt buf "%d" n;
  println buf

let id X (x:X) = (x : X)

let test = id [Nat] O

exception A

let test () = try fail [Nat] A with A -> O end

let test (_ : Unit) = fail [Nat] A : Nat

let test = try test Unit with A -> O end

let apply X Y (E : φ) (f : X -[E]-> Y) (x : X) = f x

let test () : Nat = apply [Nat] [Nat] [[]] (λ(x : Nat) -> x) O
let test () : [[IO]] Nat = apply [Nat] [Nat] [[IO]] (λ(x : Nat) -> printNat x; x) O

let main = Unit
