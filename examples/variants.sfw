type Nat =
  | O : Nat
  | S : Nat -> Nat
  | D : Nat -> Nat -> Nat

type Unit = Unit : Unit

let printZero : Unit -> Unit = begin
  @msg = constant [3 x i8] c"0\0a\00"

  declare i32 @printf(i8*, ...)

  define i8* @.printZero(i8*) {
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @msg, i32 0, i32 0))
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

let printOne : Unit -> Unit = begin
  @msg = constant [3 x i8] c"1\0a\00"

  declare i32 @printf(i8*, ...)

  define i8* @.printOne(i8*) {
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @msg, i32 0, i32 0))
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

let printTwo : Unit -> Unit = begin
  @msg = constant [3 x i8] c"2\0a\00"

  declare i32 @printf(i8*, ...)

  define i8* @.printTwo(i8*) {
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @msg, i32 0, i32 0))
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

let printOther : Unit -> Unit = begin
  @msg = constant [7 x i8] c"other\0a\00"

  declare i32 @printf(i8*, ...)

  define i8* @.printOther(i8*) {
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @msg, i32 0, i32 0))
    %r = inttoptr i32 %r1 to i8*
    ret i8* %r
  }
end

let rec f (x : Nat) : Nat =
  match x with
  | O -> let lol = printZero Unit in O
  | S O -> let lol = printOne Unit in O
  | S (S O) -> let lol = printTwo Unit in O
  | S (S (S O)) -> let lol = printZero Unit in O
  | S (S (S a)) -> let lol = printOther Unit in a
  | D a b -> f b
  | a -> a
  end

let test = f O
let test = f (S O)
let test = f (S (S O))
let test = f (S (S (S O)))
let test = f (S (S (S (S O))))
let test = f (S (S (S (S (S O)))))
let test = f (S (S (S (S (S (S O))))))
let test = f (D (S O) O)
let test = f (D O (S O))
