let printInt : Int -> Int = begin
  @msg = internal constant [3 x i8] c"%d\00"
  declare i32 @printf(i8*, ...)
  define i32* @__printInt(i32* %i, i8**) {
    %access = load i32* %i
    %r1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @msg, i32 0, i32 0), i32 %access)
    %r = inttoptr i32 %r1 to i32*
    ret i32* %r
  }
  @_printInt = global {i32* (i32*, i8**)*, i8**} {i32* (i32*, i8**)* @__printInt, i8** null}
  @printInt = global {i32* (i32*, i8**)*, i8**}* getelementptr({i32* (i32*, i8**)*, i8**}* @_printInt)
end

let zero : Int = begin
  @_zero = global i32 0
  @zero = global i32* getelementptr(i32* @_zero)
end

let unit = printInt zero
